"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = BinomialTree;
function BinomialTree(value, children) {
	this.value = value;
	this.children = children;
}

/**
 * /!\ Can only be used to merge two trees of the same rank.
 * /!\ Modifies both trees
 */

BinomialTree.prototype.merge = function (predicate, other) {

	if (predicate(this.value, other.value) <= 0) {
		this.children = this.children.concat(other);
		return this;
	} else {
		other.children = other.children.concat(this);
		return other;
	}
};

/**
 * Method used to reset a tree element in order to reuse it
 * somewhere else, e.g. insert it back in the same or a new
 * heap.
 */

BinomialTree.prototype.detach = function () {
	this.children.splice(0);
	return this;
};

BinomialTree.prototype.setparent = function (parent) {
	// we do not keep track of any parent here
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9CaW5vbWlhbFRyZWUuanMiXSwibmFtZXMiOlsiQmlub21pYWxUcmVlIiwidmFsdWUiLCJjaGlsZHJlbiIsInByb3RvdHlwZSIsIm1lcmdlIiwicHJlZGljYXRlIiwib3RoZXIiLCJjb25jYXQiLCJkZXRhY2giLCJzcGxpY2UiLCJzZXRwYXJlbnQiLCJwYXJlbnQiXSwibWFwcGluZ3MiOiI7Ozs7O2tCQUV3QkEsWTtBQUFULFNBQVNBLFlBQVQsQ0FBd0JDLEtBQXhCLEVBQStCQyxRQUEvQixFQUEwQztBQUN4RCxNQUFLRCxLQUFMLEdBQWFBLEtBQWI7QUFDQSxNQUFLQyxRQUFMLEdBQWdCQSxRQUFoQjtBQUNBOztBQUVEOzs7OztBQUtBRixhQUFhRyxTQUFiLENBQXVCQyxLQUF2QixHQUErQixVQUFXQyxTQUFYLEVBQXNCQyxLQUF0QixFQUE4Qjs7QUFFNUQsS0FBS0QsVUFBVyxLQUFLSixLQUFoQixFQUF1QkssTUFBTUwsS0FBN0IsS0FBd0MsQ0FBN0MsRUFBaUQ7QUFDaEQsT0FBS0MsUUFBTCxHQUFnQixLQUFLQSxRQUFMLENBQWNLLE1BQWQsQ0FBc0JELEtBQXRCLENBQWhCO0FBQ0EsU0FBTyxJQUFQO0FBQ0EsRUFIRCxNQUtLO0FBQ0pBLFFBQU1KLFFBQU4sR0FBaUJJLE1BQU1KLFFBQU4sQ0FBZUssTUFBZixDQUF1QixJQUF2QixDQUFqQjtBQUNBLFNBQU9ELEtBQVA7QUFDQTtBQUVELENBWkQ7O0FBY0E7Ozs7OztBQU1BTixhQUFhRyxTQUFiLENBQXVCSyxNQUF2QixHQUFnQyxZQUFZO0FBQzNDLE1BQUtOLFFBQUwsQ0FBY08sTUFBZCxDQUFzQixDQUF0QjtBQUNBLFFBQU8sSUFBUDtBQUNBLENBSEQ7O0FBS0FULGFBQWFHLFNBQWIsQ0FBdUJPLFNBQXZCLEdBQW1DLFVBQVdDLE1BQVgsRUFBb0I7QUFDdEQ7QUFDQSxDQUZEIiwiZmlsZSI6IkJpbm9taWFsVHJlZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBCaW5vbWlhbFRyZWUgKCB2YWx1ZSwgY2hpbGRyZW4gKSB7XG5cdHRoaXMudmFsdWUgPSB2YWx1ZTtcblx0dGhpcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xufVxuXG4vKipcbiAqIC8hXFwgQ2FuIG9ubHkgYmUgdXNlZCB0byBtZXJnZSB0d28gdHJlZXMgb2YgdGhlIHNhbWUgcmFuay5cbiAqIC8hXFwgTW9kaWZpZXMgYm90aCB0cmVlc1xuICovXG5cbkJpbm9taWFsVHJlZS5wcm90b3R5cGUubWVyZ2UgPSBmdW5jdGlvbiAoIHByZWRpY2F0ZSwgb3RoZXIgKSB7XG5cblx0aWYgKCBwcmVkaWNhdGUoIHRoaXMudmFsdWUsIG90aGVyLnZhbHVlICkgPD0gMCApIHtcblx0XHR0aGlzLmNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbi5jb25jYXQoIG90aGVyICk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHRlbHNlIHtcblx0XHRvdGhlci5jaGlsZHJlbiA9IG90aGVyLmNoaWxkcmVuLmNvbmNhdCggdGhpcyApO1xuXHRcdHJldHVybiBvdGhlcjtcblx0fVxuXG59O1xuXG4vKipcbiAqIE1ldGhvZCB1c2VkIHRvIHJlc2V0IGEgdHJlZSBlbGVtZW50IGluIG9yZGVyIHRvIHJldXNlIGl0XG4gKiBzb21ld2hlcmUgZWxzZSwgZS5nLiBpbnNlcnQgaXQgYmFjayBpbiB0aGUgc2FtZSBvciBhIG5ld1xuICogaGVhcC5cbiAqL1xuXG5CaW5vbWlhbFRyZWUucHJvdG90eXBlLmRldGFjaCA9IGZ1bmN0aW9uICgpIHtcblx0dGhpcy5jaGlsZHJlbi5zcGxpY2UoIDAgKTtcblx0cmV0dXJuIHRoaXM7XG59O1xuXG5CaW5vbWlhbFRyZWUucHJvdG90eXBlLnNldHBhcmVudCA9IGZ1bmN0aW9uICggcGFyZW50ICkge1xuXHQvLyB3ZSBkbyBub3Qga2VlcCB0cmFjayBvZiBhbnkgcGFyZW50IGhlcmVcbn07XG4iXX0=